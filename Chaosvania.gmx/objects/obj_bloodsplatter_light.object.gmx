<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blood</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = random_range(0.5, 1);
image_yscale = image_xscale;

//direction of individual blood splatter
dir = random_range(0,360)

//direction of the overall blood splatter
totaldir = 90

//Speed multiplyer based on direction
xspd = (180-abs(scr_angle_difference(dir,totaldir)))/50

//Speed of blood splatter
spd = random_range(8,16)*xspd + xspd*4

//rate of friction
fric = random_range(spd/10,spd/20)

//size change
sizeChange = random_range(image_xscale/20,image_xscale/6)


//sprite
image_angle = dir
if spd &gt; 7
    image_index = choose(0,1,2)
else    
    image_index = choose(3,4,5)
    
image_speed = 0

alarm[0] = 1

//variables to check overlapping surfaces
overlapx = 0
overlapy = 0

///Draw blood to surface
xx = floor(x/obj_decalsurface.surface_width)
yy = floor(y/obj_decalsurface.surface_height)

//check if it overlaps surface
spr_width = (sprite_get_width(sprite_index)-sprite_get_xoffset(sprite_index))*image_xscale
spr_height = (sprite_get_height(sprite_index)-sprite_get_yoffset(sprite_index))*image_yscale

if x+spr_width &gt; (xx+1)*obj_decalsurface.surface_width 
    overlapx = 1
else if x-spr_width &lt; (xx)*obj_decalsurface.surface_width
    overlapx = -1
else 
    overlapx = 0
    
if y+spr_height &gt; (yy+1)*obj_decalsurface.surface_height
    overlapy = 1
else if y-spr_height &lt; yy*obj_decalsurface.surface_height
    overlapy = -1
else 
    overlapy = 0

for(i=0;i&lt;2;i++)
    {
    for(j=0;j&lt;2;j++)
        {    
        if xx+(i*overlapx)&gt;0 &amp;&amp; (yy+(j*overlapy))&gt;0
            {
            if surface_exists(obj_decalsurface.surface[xx+(i*overlapx),(yy+(j*overlapy))]) 
                {
                surface_set_target(obj_decalsurface.surface[xx+(i*overlapx),(yy+(j*overlapy))])
                x -= (xx+(i*overlapx))*obj_decalsurface.surface_width
                y -= (yy+(j*overlapy))*obj_decalsurface.surface_height
                draw_self()
                x += (xx+(i*overlapx))*obj_decalsurface.surface_width
                y += (yy+(j*overlapy))*obj_decalsurface.surface_height
                surface_reset_target()
                }
            }
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = random_range(0.5, 1);
image_yscale = image_xscale;

//direction of individual blood splatter
dir = random_range(0,360)

//direction of the overall blood splatter


//Speed multiplyer based on direction
xspd = (180-abs(scr_angle_difference(dir,totaldir)))/100

//Speed of blood splatter
spd = random_range(8,16)*xspd + xspd*4

//rate of friction
fric = random_range(spd/10,spd/20)

//size change
sizeChange = random_range(image_xscale/20,image_xscale/6)


//sprite
image_angle = dir
if spd &gt; 7
    image_index = choose(0,1,2)
else    
    image_index = choose(3,4,5)
    
image_speed = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += lengthdir_x(spd, dir);
y += lengthdir_y(spd, dir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale -= sizeChange
image_yscale = image_xscale


spd -= fric

if (spd &gt; 0)
   image_alpha -= random_range(0.05,0.1);
    
//spd = max(0,spd-fric*image_xscale)

if spd &lt;= 0 || image_xscale &lt;= 0 
    instance_destroy()

///Draw blood to surface
xx = floor(x/obj_decalsurface.surface_width)
yy = floor(y/obj_decalsurface.surface_height)

//check if it overlaps surface
spr_width = (sprite_get_width(sprite_index)-sprite_get_xoffset(sprite_index))*image_xscale
spr_height = (sprite_get_height(sprite_index)-sprite_get_yoffset(sprite_index))*image_yscale

if x+spr_width &gt; (xx+1)*obj_decalsurface.surface_width 
    overlapx = 1
else if x-spr_width &lt; (xx)*obj_decalsurface.surface_width
    overlapx = -1
else 
    overlapx = 0
    
if y+spr_height &gt; (yy+1)*obj_decalsurface.surface_height
    overlapy = 1
else if y-spr_height &lt; yy*obj_decalsurface.surface_height
    overlapy = -1
else 
    overlapy = 0

for(i=0;i&lt;2;i++)
    {
    for(j=0;j&lt;2;j++)
        {    
        if xx+(i*overlapx)&gt;0 &amp;&amp; (yy+(j*overlapy))&gt;0
            {
            if surface_exists(obj_decalsurface.surface[xx+(i*overlapx),(yy+(j*overlapy))]) 
                {
                surface_set_target(obj_decalsurface.surface[xx+(i*overlapx),(yy+(j*overlapy))])
                x -= (xx+(i*overlapx))*obj_decalsurface.surface_width
                y -= (yy+(j*overlapy))*obj_decalsurface.surface_height
                draw_self()
                x += (xx+(i*overlapx))*obj_decalsurface.surface_width
                y += (yy+(j*overlapy))*obj_decalsurface.surface_height
                surface_reset_target()
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
