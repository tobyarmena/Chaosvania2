<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stepcount = 0
xaxis = 0
yaxis = 0
whichside = 0
alarm[0]=10
swayspeed = 10
shootx = 0
shooty=0
knockback = 0
knockbackspd = 1
sideknockback = 0

//Shooting
shotdelay = 16
vari = 5
clip_size = 4
clip_ammo = clip_size
reloading = false
state = "idle" //reloading, dead, idle, shooting

//Minigun
spin = 0



image_speed = 0.3


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stepcount ++
alarm[0] = swayspeed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_player.state == "action"
    {
    if index == "left"
        {
        if obj_inv.arm1[0] == ""
            scr_shoot_step()
        else 
            script_execute(obj_inv.arm1[5])
        }
    if index == "right"
        {
        if obj_inv.arm2[0] == ""
            scr_shoot_step()
        else 
            script_execute(obj_inv.arm1[5])
        }
    
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if sprite_index == spr_armbasic_reload2
    {
    state = "idle"
    clip_ammo = clip_size
    knockback = 0
    }
    
if sprite_index == spr_armbasic_shoot
    {
    if state == "idle"
        sprite_index = spr_armbasic_idle
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set base position
basex = obj_player.x + lengthdir_x(whichside*50,xaxis)
basey = obj_player.y + lengthdir_y(whichside*50,xaxis)

//Create a multiplier used later to check if it goes on left or right side

if index == "left"
    whichside = -1
else if index == "right"
    whichside = 1
    
//Create the axis of movement for the arms

xaxis = obj_player.direction + 90 + sideknockback
yaxis = obj_player.direction

//control sideknockback
if sideknockback &gt; 0
    sideknockback --
else if sideknockback &lt; 0
    sideknockback ++

//Set position of shooting
shootx = basex + lengthdir_x(5,yaxis)
shooty = basey + lengthdir_y(5,yaxis)




if obj_player.state == "action" || obj_player.state == "talking" || obj_player.state == "upgrading"
    {
    if obj_player.shooting == true
        {
        if knockback &gt; 0
            knockback -= knockbackspd
        
        x = basex + lengthdir_x(-knockback,yaxis) 
        y = basey + lengthdir_y(-knockback,yaxis) 
        }
    else if obj_player.moving == true
        {
        swayspeed = 5
        if obj_player.m_strafe == false
            {
            x = basex +lengthdir_x(sin(stepcount)*3*whichside,yaxis)
            y = basey +lengthdir_y(sin(stepcount)*3*whichside,yaxis)
            }
        else if obj_player.m_strafe == true
            {
            x = basex +lengthdir_x(sin(stepcount)*1.5*whichside,xaxis)
            y = basey +lengthdir_y(sin(stepcount)*1.5*whichside,xaxis)
            }
        }
    else
        {
        swayspeed = 15
        x = basex +lengthdir_x(sin(stepcount)*1.5*whichside,xaxis) +lengthdir_x(cos(stepcount),yaxis)
        y = basey +lengthdir_y(sin(stepcount)*1.5*whichside,xaxis) +lengthdir_y(cos(stepcount),yaxis)
        }
    }
else if obj_player.state == "pickup"
    {
    if obj_player.moving == true
        {
        swayspeed = 5
        if obj_player.m_strafe == false
            {
            x = basex +lengthdir_x(sin(stepcount)*3,yaxis)
            y = basey +lengthdir_y(sin(stepcount)*3,yaxis)
            }
        else if obj_player.m_strafe == true
            {
            x = basex +lengthdir_x(sin(stepcount)*1.5,xaxis)
            y = basey +lengthdir_y(sin(stepcount)*1.5,xaxis)
            }
        }
    else
        {
        swayspeed = 15
        x = basex +lengthdir_x(sin(stepcount)*1.5,xaxis) +lengthdir_x(cos(stepcount),yaxis)
        y = basey +lengthdir_y(sin(stepcount)*1.5,xaxis) +lengthdir_y(cos(stepcount),yaxis)
        }
    }
//Set direction
if obj_player.state == "action" 
    {
    with(obj_player)
        if other.reloading == true
            {
            with(other)
                direction = yaxis+15*whichside
            }
        else if distance_to_point(mouse_x,mouse_y)&lt;40 || abs(scr_angle_difference(other.yaxis,point_direction(x,y,mouse_x,mouse_y)))&gt;40
            {
            with(other)
                direction = yaxis   
            }
        else
            {
            with(other)
                direction = point_direction(x,y,mouse_x,mouse_y)
            }
    }
else if obj_player.state == "talking" || obj_player.state == "upgrading"
    {
    direction = obj_player.direction
    }
else if obj_player.state == "pickup"
    {
    direction = yaxis - 30*whichside
    }
image_angle = direction        

//Draw sprite        
draw_sprite_ext(sprite_index, image_index, x, y, 1, whichside, image_angle, c_white, image_alpha );
        
//Arm script
scr_shoot_draw()    
        
        
        
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
