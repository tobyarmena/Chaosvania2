<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_equipementpod</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>activated = false
scale = 1
image_alpha = 0.5
move = 0

//Initialize dimension variables

//Set point that the hologram screen shoots out from
xx = x+64
yy = y

//Set width and height
width = 512*scale
height = 768*scale

//Set points for the final rectangle of the hologram
x1 = view_xview + view_wview/2 + width
x2 = x1 + width
y1 = view_yview + view_hview/2 - height/2
y2 = y1 + height

//Head slot
head_width = width/2
head_height = height/3
headx1 = x1 + width/2 - head_width/2
headx2 = headx1 + head_width
heady1 = y1
heady2 = heady1 + head_height 
        
        
//core slot
core_width = width/2 - 32
core_height = height/3
corex1 = x1 + width/2 - core_width/2
corex2 = corex1 + core_width
corey1 = y1 + head_height
corey2 = corey1 + core_height 


//arm slots
arm_width = (width-core_width)/2
arm_height = core_height

arm1x1 = x1
arm1x2 = corex1
arm1y1 = corey1
arm1y2 = corey2


arm2x1 = corex2
arm2x2 = x1+width
arm2y1 = corey1
arm2y2 = corey2


//Leg slot
leg_width = width/2
leg_height = height/3
legx1 = x1 + width/2 - head_width/2
legx2 = headx1 + head_width
legy1 = corey2
legy2 = legy1 + leg_height 
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if distance_to_object(obj_player)=0
    {
    obj_player.state = "upgrading"
    activated = true
    }
else if distance_to_object(obj_player)&gt;3
    {
    activated = false
    if obj_player.state == "upgrading"
        {
        obj_player.state = "action"
        }
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if activated == true
    {
    move = min(move+0.1,1) 
    }
else
    {
    move = max(move-0.1,0)
    }
    
if move &gt; 0
    {
    //Set point that the hologram screen shoots out from
    xx = x+64-view_xview
    yy = y-view_yview
    
    //Set width and height
    width = 512*scale
    height = 768*scale
    
    //Set points for the final rectangle of the hologram
    x1 = view_xview + view_wview/2 +96 -view_xview
    x2 = x1 + width
    y1 = view_yview + view_hview/2 - height/2 -view_yview
    y2 = y1 + height
    
    
    //Set actual points (accounts for pop up animation)
    dir1 = point_direction(xx,yy,x1,y1)
    dir2 = point_direction(xx,yy,x2,y1)
    dir3 = point_direction(xx,yy,x2,y2)
    dir4 = point_direction(xx,yy,x1,y2)
    
    len1 = point_distance(xx,yy,x1,y1)
    len2 = point_distance(xx,yy,x2,y1)
    len3 = point_distance(xx,yy,x2,y2)
    len4 = point_distance(xx,yy,x1,y2)
    
    xx1 = xx + lengthdir_x(len1*move,dir1)
    yy1 = yy + lengthdir_y(len1*move,dir1)
    
    xx2 = xx + lengthdir_x(len2*move,dir2)
    yy2 = yy + lengthdir_y(len2*move,dir2)
    
    xx3 = xx + lengthdir_x(len3*move,dir3)
    yy3 = yy + lengthdir_y(len3*move,dir3)
    
    xx4 = xx + lengthdir_x(len4*move,dir4)
    yy4 = yy + lengthdir_y(len4*move,dir4)
    
    draw_set_color(c_lime)
    draw_set_alpha(0.5)
    
    //Draw the hologram with given points
    draw_line_width(xx,yy,xx1,yy1,2)
    draw_line_width(xx,yy,xx2,yy2,2)
    draw_line_width(xx,yy,xx3,yy3,2)
    draw_line_width(xx,yy,xx4,yy4,2)
    draw_rectangle(xx1,yy1,xx3,yy3,true)
    draw_primitive_begin(pr_trianglefan)
    
    draw_vertex(xx,yy)
    draw_vertex(xx1,yy1)
    draw_vertex(xx2,yy2)
    draw_vertex(xx3,yy3)
    draw_vertex(xx4,yy4)
    draw_vertex(xx1,yy1)
    draw_primitive_end() 
    
    
    if move = 1
        {
        draw_set_color(c_red)
        //Draw Equipement slots
    
        //Head slot
        head_width = width/2
        head_height = height/3
        headx1 = x1 + width/2 - head_width/2
        headx2 = headx1 + head_width
        heady1 = y1
        heady2 = heady1 + head_height 
        draw_rectangle(headx1,heady1,headx2,heady2,true)
        if obj_inv.skullpickup == false
            {
            if obj_inv.skull[3] == spr_empty
                {
                draw_sprite(spr_headbasic_model,0,headx1+head_width/2,heady1+head_height/2)
                
                }
            else
                draw_sprite(obj_inv.skull[3],0,headx1,heady1)
            }
            
        
        //core slot
        core_width = width/2 - 32
        core_height = height/3
        corex1 = x1 + width/2 - core_width/2
        corex2 = corex1 + core_width
        corey1 = y1 + head_height
        corey2 = corey1 + core_height 
        draw_rectangle(corex1,corey1,corex2,corey2,true)
        if obj_inv.corepickup == false
            draw_sprite(obj_inv.core[3],0,corex1,corey1)
        
        //arm slots
        arm_width = (width-core_width)/2
        arm_height = core_height
        
        arm1x1 = x1
        arm1x2 = corex1
        arm1y1 = corey1
        arm1y2 = corey2
        draw_rectangle(arm1x1,arm1y1,arm1x2,arm1y2,true)
        if obj_inv.arm1pickup == false
            draw_sprite(obj_inv.arm1[3],0,arm1x1,arm1y1)
        
        arm2x1 = corex2
        arm2x2 = x1+width
        arm2y1 = corey1
        arm2y2 = corey2
        draw_rectangle(arm2x1,arm2y1,arm2x2,arm2y2,true)
        if obj_inv.arm2pickup == false
            draw_sprite(obj_inv.arm2[3],0,arm2x1,arm2y1)
        
        //Leg slot
        leg_width = width/2
        leg_height = height/3
        legx1 = x1 + width/2 - head_width/2
        legx2 = headx1 + head_width
        legy1 = corey2
        legy2 = legy1 + leg_height 
        draw_rectangle(legx1,legy1,legx2,legy2,true)
        if obj_inv.legpickup == false
            draw_sprite(obj_inv.legs[3],0,legx1,legy1)
        }
    }
    
draw_self()
draw_set_color(c_white)
draw_set_alpha(1)



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
