<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing Slots

scr_itemlibrary()

//Max inventory slots
maxslots = 32

maxdimension = 7

//Starting position of the inventory
startx = x
starty = y

//Distance between slots
dis = 32

//Create empty inventory slots
for (i=0; i&lt;maxslots; i+=1)
{
    inv[i,0] = "" //Name
    inv[i,1] = "" //Type
    inv[i,2] = "" //Description
    inv[i,3] = spr_empty //Inventory Sprite
    inv[i,4] = spr_empty //In-Game Sprite
    inv[i,5] = scr_empty //Step event script
    inv[i,6] = scr_empty //Draw event script
}

//Create empty equipment slots

//Skull
skull[0] = "" //Name
skull[1] = "" //Type
skull[2] = "" //Description
skull[3] = spr_empty //Inventory Sprite
skull[4] = spr_empty //In-Game Sprite
skull[5] = scr_empty //Step event script
skull[6] = scr_empty //Draw event script

//Core
core[0] = "" //Name
core[1] = "" //Type
core[2] = "" //Description
core[3] = spr_empty //Inventory Sprite
core[4] = spr_empty //In-Game Sprite
core[5] = scr_empty //Step event script
core[6] = scr_empty //Draw event script

//arm1
arm1[0] = "" //Name
arm1[1] = "" //Type
arm1[2] = "" //Description
arm1[3] = spr_empty //Inventory Sprite
arm1[4] = spr_empty //In-Game Sprite
arm1[5] = scr_empty //Step event script
arm1[6] = scr_empty //Draw event script

//arm2
arm2[0] = "" //Name
arm2[1] = "" //Type
arm2[2] = "" //Description
arm2[3] = spr_empty //Inventory Sprite
arm2[4] = spr_empty //In-Game Sprite
arm2[5] = scr_empty //Step event script
arm2[6] = scr_empty //Draw event script

//legs
legs[0] = "" //Name
legs[1] = "" //Type
legs[2] = "" //Description
legs[3] = spr_empty //Inventory Sprite
legs[4] = spr_empty //In-Game Sprite
legs[5] = scr_empty //Step event script
legs[6] = scr_empty //Draw event script

//Load inventory from data
for (i=0; i&lt;maxslots; i+=1)
    {
    if !is_undefined(ds_map_find_value(obj_data.current_data,obj_data.inventory[i]))
        {
        inv[i,0] = ds_map_find_value(obj_data.current_data,obj_data.inventory[i])
        }
    show_debug_message(string(inv[i,0]))
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == inv[i,0]
            {
            inv[i,1] = item_lib[j,1]
            inv[i,2] = item_lib[j,2]
            inv[i,3] = item_lib[j,3]
            inv[i,4] = item_lib[j,4]
            inv[i,5] = item_lib[j,5]
            inv[i,6] = item_lib[j,6]
            }
        }
    if inv[i,0] == ""
        {
        inv[i,1] = "" 
        inv[i,2] = "" 
        inv[i,3] = spr_empty 
        inv[i,4] = spr_empty 
        inv[i,5] = scr_empty 
        inv[i,6] = scr_empty 
        }
    }
    
//Load equipement from save data
if !is_undefined(ds_map_find_value(obj_data.current_data,"skull"))
    {
    skull[0] = ds_map_find_value(obj_data.current_data,"skull")
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == skull[0]
            {
            skull[1] = item_lib[j,1]
            skull[2] = item_lib[j,2]
            skull[3] = item_lib[j,3]
            skull[4] = item_lib[j,4]
            skull[5] = item_lib[j,5]
            skull[6] = item_lib[j,6]
            }
        }
    }
if !is_undefined(ds_map_find_value(obj_data.current_data,"arm1"))
    {
    arm1[0] = ds_map_find_value(obj_data.current_data,"arm1")
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == arm1[0]
            {
            arm1[1] = item_lib[j,1]
            arm1[2] = item_lib[j,2]
            arm1[3] = item_lib[j,3]
            arm1[4] = item_lib[j,4]
            arm1[5] = item_lib[j,5]
            arm1[6] = item_lib[j,6]
            }
        }
    }
if !is_undefined(ds_map_find_value(obj_data.current_data,"arm2"))
    {
    arm2[0] = ds_map_find_value(obj_data.current_data,"arm2")
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == arm2[0]
            {
            arm2[1] = item_lib[j,1]
            arm2[2] = item_lib[j,2]
            arm2[3] = item_lib[j,3]
            arm2[4] = item_lib[j,4]
            arm2[5] = item_lib[j,5]
            arm2[6] = item_lib[j,6]
            }
        }
    }
if !is_undefined(ds_map_find_value(obj_data.current_data,"core"))
    {
    core[0] = ds_map_find_value(obj_data.current_data,"core")
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == core[0]
            {
            core[1] = item_lib[j,1]
            core[2] = item_lib[j,2]
            core[3] = item_lib[j,3]
            core[4] = item_lib[j,4]
            core[5] = item_lib[j,5]
            core[6] = item_lib[j,6]
            }
        }
    }
if !is_undefined(ds_map_find_value(obj_data.current_data,"legs"))
    {
    legs[0] = ds_map_find_value(obj_data.current_data,"legs")
    for(j=0;j&lt;array_height_2d(item_lib);j++)
        {
        if item_lib[j,0] == legs[0]
            {
            legs[1] = item_lib[j,1]
            legs[2] = item_lib[j,2]
            legs[3] = item_lib[j,3]
            legs[4] = item_lib[j,4]
            legs[5] = item_lib[j,5]
            legs[6] = item_lib[j,6]
            }
        }
    }







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xx = noone
yy = noone

xx2 = noone
yy2 = noone

eqslot = noone

for (i=0; i&lt;maxslots; i+=1)
{
    pickup[i] = false
};

skullpickup = false
corepickup = false
arm1pickup = false
arm2pickup = false
legpickup = false


///Front end
show = false

//Dimensions
box_width = 32
separation_width = 32
separation_height = 16
columns = 16
rows = 2
width = box_width*columns + separation_width*(columns+1)
height = box_width*rows + separation_height*(rows+1)
box_x1 = view_wview/2 - width/2
box_x2 = box_x1 + width
box_y1 = view_hview - height
box_y2 = view_hview

slide = height

spr_attached = spr_empty

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_player)
{

box_x1 = view_wview/2 - width/2
box_x2 = box_x1 + width
box_y1 = view_hview - height
box_y2 = view_hview
if instance_exists(obj_upgradepod)
    {
    pod = instance_nearest(obj_player.x,obj_player.y,obj_upgradepod)

    mousex = mouse_x - view_xview
    mousey = mouse_y - view_yview
    
    headx1 = pod.headx1 
    headx2 = pod.headx2 
    heady1 = pod.heady1 
    heady2 = pod.heady2 
    
    corex1 = pod.corex1 
    corex2 = pod.corex2 
    corey1 = pod.corey1 
    corey2 = pod.corey2 
    
    arm1x1 = pod.arm1x1 
    arm1x2 = pod.arm1x2
    arm1y1 = pod.arm1y1
    arm1y2 = pod.arm1y2
    
    arm2x1 = pod.arm2x1 
    arm2x2 = pod.arm2x2 
    arm2y1 = pod.arm2y1 
    arm2y2 = pod.arm2y2
    
    legx1 = pod.legx1  
    legx2 = pod.legx2 
    legy1 = pod.legy1 
    legy2 = pod.legy2 
    
    
    
    if pod.move = 1 
        {
        slide = max(slide-40,0)
        }
    else
        {
        slide = min(slide+40,height)
        }
    if slide &lt; height
        show = true
    else  
        show = false
        
    if show == true
        {
        if mouse_check_button_pressed(mb_left)
            {
            //find out where and if you are clicking on an inventory slot
            for (i=0; i&lt;rows; i+=1) 
                {
                for (j=0; j&lt;columns; j+=1)
                    {
                    if mousex &gt; box_x1+separation_width+j*(box_width+separation_width) and mousex &lt; box_x1+separation_width+j*(box_width+separation_width)+box_width 
                        xx = j
                    if mousey &gt;box_y1+separation_height + i*(box_width+separation_height) and mousey &lt; box_y1+separation_height + i*(box_width+separation_height)+box_width
                        yy = i
                    }
                }
            //find out if you are clicking on the skull
            if mousex &gt; headx1 and mousex &lt; headx2 and mousey &gt; heady1 and mousey &lt;heady2
                {
                eqslot = "skull"
                temp[0] = skull[0]
                temp[1] = skull[1]
                temp[2] = skull[2]
                temp[3] = skull[3]
                temp[4] = skull[4]
                temp[5] = skull[5]
                temp[6] = skull[6]
                
                skullpickup = true
                spr_attached = skull[3]
                }
            //find out if you are clicking on the core
            else if mousex &gt; corex1 and mousex &lt; corex2 and mousey &gt; corey1 and mousey &lt;corey2
                {
                eqslot = "core"
                temp[0] = core[0]
                temp[1] = core[1]
                temp[2] = core[2]
                temp[3] = core[3]
                temp[4] = core[4]
                temp[5] = core[5]
                temp[6] = core[6]
                
                corepickup = true
                spr_attached = core[3]
                }
            //find out if you are clicking on the arm1
            else if mousex &gt; arm1x1 and mousex &lt; arm1x2 and mousey &gt; arm1y1 and mousey &lt;arm1y2
                {
                eqslot = "arm1"
                temp[0] = arm1[0]
                temp[1] = arm1[1]
                temp[2] = arm1[2]
                temp[3] = arm1[3]
                temp[4] = arm1[4]
                temp[5] = arm1[5]
                temp[6] = arm1[6]
                
                arm1pickup = true
                spr_attached = arm1[3]
                }
            //find out if you are clicking on the arm2
            else if mousex &gt; arm2x1 and mousex &lt; arm2x2 and mousey &gt; arm2y1 and mousey &lt;arm2y2
                {
                eqslot = "arm2"
                temp[0] = arm2[0]
                temp[1] = arm2[1]
                temp[2] = arm2[2]
                temp[3] = arm2[3]
                temp[4] = arm2[4]
                temp[5] = arm2[5]
                temp[6] = arm2[6]
                
                arm2pickup = true
                spr_attached = arm2[3]
                }
            //find out if you are clicking on the leg
            else if mousex &gt; legx1 and mousex &lt; legx2 and mousey &gt; legy1 and mousey &lt;legy2
                {
                eqslot = "legs"
                temp[0] = legs[0]
                temp[1] = legs[1]
                temp[2] = legs[2]
                temp[3] = legs[3]
                temp[4] = legs[4]
                temp[5] = legs[5]
                temp[6] = legs[6]
                
                legpickup = true
                spr_attached = legs[3]
                }
            //Get the item you're holding
            else if xx != noone &amp;&amp; yy != noone 
                {
                temp[0] = inv[xx+(yy*columns),0]
                temp[1] = inv[xx+(yy*columns),1]
                temp[2] = inv[xx+(yy*columns),2]
                temp[3] = inv[xx+(yy*columns),3]
                temp[4] = inv[xx+(yy*columns),4]
                temp[5] = inv[xx+(yy*columns),5]
                temp[6] = inv[xx+(yy*columns),6]
                
                pickup[xx+(yy*columns)] = true
                spr_attached = inv[xx+(yy*columns),3]
                }
            }
        else if mouse_check_button_released(mb_left) and show = true
            {
            //find out where you are releasing
            for (i=0; i&lt;rows; i+=1) 
                {
                for (j=0; j&lt;columns; j+=1)
                    {
                    if mousex &gt; box_x1+separation_width+j*(box_width+separation_width) and mousex &lt; box_x1+separation_width+j*(box_width+separation_width)+box_width
                        xx2 = j    
                    if mousey &gt;box_y1+separation_height + i*(box_width+separation_height) and mousey &lt; box_y1+separation_height + i*(box_width+separation_height)+box_width
                        yy2 = i
                    }
                }
            //Delete Item if in garbage  
            if mousex &gt; box_x1-separation_width*2 and mousex &lt; box_x1-separation_width*2 + box_width and mousey &gt; box_y1+height/2 - box_width/2 and mousey &lt; box_y1+height/2 - box_width/2 + box_width
                { 
                if xx!= noone and yy!= noone
                    {  
                    inv[xx+(yy*columns),0] = "" 
                    inv[xx+(yy*columns),1] = "" 
                    inv[xx+(yy*columns),2] = "" 
                    inv[xx+(yy*columns),3] = spr_empty
                    inv[xx+(yy*columns),4] = spr_empty
                    inv[xx+(yy*columns),5] = scr_empty 
                    inv[xx+(yy*columns),6] = scr_empty 
                    }
                } 
            //Switch with head slot
            else if mousex &gt; headx1 and mousex &lt; headx2 and mousey &gt; heady1 and mousey &lt;heady2
                {
                if xx!= noone and yy!= noone and inv[xx+(yy*columns),1] == "skull"
                    {
                    inv[xx+(yy*columns),0] = skull[0]
                    inv[xx+(yy*columns),1] = skull[1]
                    inv[xx+(yy*columns),2] = skull[2]
                    inv[xx+(yy*columns),3] = skull[3]
                    inv[xx+(yy*columns),4] = skull[4]
                    inv[xx+(yy*columns),5] = skull[5]
                    inv[xx+(yy*columns),6] = skull[6]
                
                    skull[0] = temp[0]
                    skull[1] = temp[1]
                    skull[2] = temp[2]
                    skull[3] = temp[3]
                    skull[4] = temp[4]
                    skull[5] = temp[5]
                    skull[6] = temp[6]
                    }
                }
            //switch with core slot
            else if mousex &gt; corex1 and mousex &lt; corex2 and mousey &gt; corey1 and mousey &lt;corey2
                {
                if xx!= noone and yy!= noone and inv[xx+(yy*columns),1] == "core"
                    {
                    inv[xx+(yy*columns),0] = core[0]
                    inv[xx+(yy*columns),1] = core[1]
                    inv[xx+(yy*columns),2] = core[2]
                    inv[xx+(yy*columns),3] = core[3]
                    inv[xx+(yy*columns),4] = core[4]
                    inv[xx+(yy*columns),5] = core[5]
                    inv[xx+(yy*columns),6] = core[6]
                
                    core[0] = temp[0]
                    core[1] = temp[1]
                    core[2] = temp[2]
                    core[3] = temp[3]
                    core[4] = temp[4]
                    core[5] = temp[5]
                    core[6] = temp[6]
                    }
                }
            //switch with arm1 slot
            else if mousex &gt; arm1x1 and mousex &lt; arm1x2 and mousey &gt; arm1y1 and mousey &lt;arm1y2
                {
                if xx!= noone and yy!= noone and inv[xx+(yy*columns),1] == "arm"
                    {
                    inv[xx+(yy*columns),0] = arm1[0]
                    inv[xx+(yy*columns),1] = arm1[1]
                    inv[xx+(yy*columns),2] = arm1[2]
                    inv[xx+(yy*columns),3] = arm1[3]
                    inv[xx+(yy*columns),4] = arm1[4]
                    inv[xx+(yy*columns),5] = arm1[5]
                    inv[xx+(yy*columns),6] = arm1[6]
                
                    arm1[0] = temp[0]
                    arm1[1] = temp[1]
                    arm1[2] = temp[2]
                    arm1[3] = temp[3]
                    arm1[4] = temp[4]
                    arm1[5] = temp[5]
                    arm1[6] = temp[6]
                    }
                if eqslot == "arm2"
                    {
                    arm2[0] = arm1[0]
                    arm2[1] = arm1[1]
                    arm2[2] = arm1[2]
                    arm2[3] = arm1[3]
                    arm2[4] = arm1[4]
                    arm2[5] = arm1[5]
                    arm2[6] = arm1[6]
                
                    arm1[0] = temp[0]
                    arm1[1] = temp[1]
                    arm1[2] = temp[2]
                    arm1[3] = temp[3]
                    arm1[4] = temp[4]
                    arm1[5] = temp[5]
                    arm1[6] = temp[6]
                    }
                }
            //switch with arm2 slot
            else if mousex &gt; arm2x1 and mousex &lt; arm2x2 and mousey &gt; arm2y1 and mousey &lt;arm2y2
                {
                if xx!= noone and yy!= noone and inv[xx+(yy*columns),1] == "arm"
                    {
                    inv[xx+(yy*columns),0] = arm2[0]
                    inv[xx+(yy*columns),1] = arm2[1]
                    inv[xx+(yy*columns),2] = arm2[2]
                    inv[xx+(yy*columns),3] = arm2[3]
                    inv[xx+(yy*columns),4] = arm2[4]
                    inv[xx+(yy*columns),5] = arm2[5]
                    inv[xx+(yy*columns),6] = arm2[6]
                
                    arm2[0] = temp[0]
                    arm2[1] = temp[1]
                    arm2[2] = temp[2]
                    arm2[3] = temp[3]
                    arm2[4] = temp[4]
                    arm2[5] = temp[5]
                    arm2[6] = temp[6]
                    }
                if eqslot == "arm1"
                    {
                    arm1[0] = arm2[0]
                    arm1[1] = arm2[1]
                    arm1[2] = arm2[2]
                    arm1[3] = arm2[3]
                    arm1[4] = arm2[4]
                    arm1[5] = arm2[5]
                    arm1[6] = arm2[6]
                
                    arm2[0] = temp[0]
                    arm2[1] = temp[1]
                    arm2[2] = temp[2]
                    arm2[3] = temp[3]
                    arm2[4] = temp[4]
                    arm2[5] = temp[5]
                    arm2[6] = temp[6]
                    }
                }
            //switch with leg slot
            else if mousex &gt; legx1 and mousex &lt; legx2 and mousey &gt; legy1 and mousey &lt;legy2
                {
                if xx!= noone and yy!= noone and inv[xx+(yy*columns),1] == "legs"
                    {
                    inv[xx+(yy*columns),0] = legs[0]
                    inv[xx+(yy*columns),1] = legs[1]
                    inv[xx+(yy*columns),2] = legs[2]
                    inv[xx+(yy*columns),3] = legs[3]
                    inv[xx+(yy*columns),4] = legs[4]
                    inv[xx+(yy*columns),5] = legs[5]
                    inv[xx+(yy*columns),6] = legs[6]
                
                    legs[0] = temp[0]
                    legs[1] = temp[1]
                    legs[2] = temp[2]
                    legs[3] = temp[3]
                    legs[4] = temp[4]
                    legs[5] = temp[5]
                    legs[6] = temp[6]
                    }
                }
            //Switch previtem into new location  
            else if xx2 != noone and yy2 !=  noone and eqslot == "skull" and (inv[xx2+(yy2*columns),1] == "skull"||inv[xx2+(yy2*columns),1] == "")
                {
                skull[0] = inv[xx2+(yy2*columns),0]
                skull[1] = inv[xx2+(yy2*columns),1]
                skull[2] = inv[xx2+(yy2*columns),2]
                skull[3] = inv[xx2+(yy2*columns),3]
                skull[4] = inv[xx2+(yy2*columns),4]
                skull[5] = inv[xx2+(yy2*columns),5]
                skull[6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            else if xx2 != noone and yy2 !=  noone and eqslot == "core" and (inv[xx2+(yy2*columns),1] == "core"||inv[xx2+(yy2*columns),1] == "")
                {
                core[0] = inv[xx2+(yy2*columns),0]
                core[1] = inv[xx2+(yy2*columns),1]
                core[2] = inv[xx2+(yy2*columns),2]
                core[3] = inv[xx2+(yy2*columns),3]
                core[4] = inv[xx2+(yy2*columns),4]
                core[5] = inv[xx2+(yy2*columns),5]
                core[6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            else if xx2 != noone and yy2 !=  noone and eqslot == "arm1" and (inv[xx2+(yy2*columns),1] == "arm1"||inv[xx2+(yy2*columns),1] == "")
                {
                arm1[0] = inv[xx2+(yy2*columns),0]
                arm1[1] = inv[xx2+(yy2*columns),1]
                arm1[2] = inv[xx2+(yy2*columns),2]
                arm1[3] = inv[xx2+(yy2*columns),3]
                arm1[4] = inv[xx2+(yy2*columns),4]
                arm1[5] = inv[xx2+(yy2*columns),5]
                arm1[6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            else if xx2 != noone and yy2 !=  noone and eqslot == "arm2" and (inv[xx2+(yy2*columns),1] == "arm2"||inv[xx2+(yy2*columns),1] == "")
                {
                arm2[0] = inv[xx2+(yy2*columns),0]
                arm2[1] = inv[xx2+(yy2*columns),1]
                arm2[2] = inv[xx2+(yy2*columns),2]
                arm2[3] = inv[xx2+(yy2*columns),3]
                arm2[4] = inv[xx2+(yy2*columns),4]
                arm2[5] = inv[xx2+(yy2*columns),5]
                arm2[6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            else if xx2 != noone and yy2 !=  noone and eqslot == "legs" and (inv[xx2+(yy2*columns),1] == "legs"||inv[xx2+(yy2*columns),1] == "")
                {
                legs[0] = inv[xx2+(yy2*columns),0]
                legs[1] = inv[xx2+(yy2*columns),1]
                legs[2] = inv[xx2+(yy2*columns),2]
                legs[3] = inv[xx2+(yy2*columns),3]
                legs[4] = inv[xx2+(yy2*columns),4]
                legs[5] = inv[xx2+(yy2*columns),5]
                legs[6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            else if xx2 != noone and yy2 !=  noone and xx != noone and yy != noone 
                {
                inv[xx+(yy*columns),0] = inv[xx2+(yy2*columns),0]
                inv[xx+(yy*columns),1] = inv[xx2+(yy2*columns),1]
                inv[xx+(yy*columns),2] = inv[xx2+(yy2*columns),2]
                inv[xx+(yy*columns),3] = inv[xx2+(yy2*columns),3]
                inv[xx+(yy*columns),4] = inv[xx2+(yy2*columns),4]
                inv[xx+(yy*columns),5] = inv[xx2+(yy2*columns),5]
                inv[xx+(yy*columns),6] = inv[xx2+(yy2*columns),6]
            
                inv[xx2+(yy2*columns),0] = temp[0]
                inv[xx2+(yy2*columns),1] = temp[1]
                inv[xx2+(yy2*columns),2] = temp[2]
                inv[xx2+(yy2*columns),3] = temp[3]
                inv[xx2+(yy2*columns),4] = temp[4]
                inv[xx2+(yy2*columns),5] = temp[5]
                inv[xx2+(yy2*columns),6] = temp[6]
                }
            
            
            // reset all variables   
            if (xx != noone and yy != noone) 
                {   
                pickup[xx+(yy*columns)] = false
                spr_attached = spr_empty
                xx = noone
                yy = noone
                xx2 = noone
                yy2 = noone
                eqslot = noone
                }
            else if eqslot != noone
                {
                skullpickup = false
                corepickup = false
                arm1pickup = false
                arm2pickup = false
                legpickup = false
                spr_attached = spr_empty
                xx = noone
                yy = noone
                xx2 = noone
                yy2 = noone
                eqslot = noone
                }
            }
        }
    else 
        {
        // reset all variables   
            if (xx != noone and yy != noone) 
                {   
                pickup[xx+(yy*columns)] = false
                spr_attached = spr_empty
                xx = noone
                yy = noone
                xx2 = noone
                yy2 = noone
                eqslot = noone
                }
            else if eqslot != noone
                {
                skullpickup = false
                corepickup = false
                arm1pickup = false
                arm2pickup = false
                legpickup = false
                spr_attached = spr_empty
                xx = noone
                yy = noone
                xx2 = noone
                yy2 = noone
                eqslot = noone
                }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw inventory
if show == true
    {
    draw_set_color(c_lime)
    draw_set_alpha(0.5)
    
    //Draw overall rectangle
    draw_rectangle(box_x1,box_y1+slide,box_x2,box_y2+slide,false)
    
    //Draw inside boxes
    draw_set_color(c_green)
    for (i=0; i&lt;rows; i+=1)
        {
        for (j=0; j&lt;columns; j+=1)
            {
            draw_rectangle
                (
                box_x1+separation_width+j*(box_width+separation_width),
                box_y1+separation_height +slide + i*(box_width+separation_height),
                box_x1+separation_width+j*(box_width+separation_width)+box_width,
                box_y1+separation_height +slide  + i*(box_width+separation_height)+box_width,
                true
                )
                
            if pickup[j+(i*columns)] == false
            {
            draw_sprite(obj_inv.inv[j+(i*columns),3],0,
                box_x1+separation_width+j*(box_width+separation_width),
                box_y1+separation_height + i*(box_width+separation_height)+slide) 
            }
                
            }
        }
    
    //draw trash
     draw_rectangle
        (
        box_x1-separation_width*2,
        box_y1+height/2 - box_width/2 + slide,
        box_x1-separation_width*2 + box_width,
        box_y1+height/2 - box_width/2 + box_width + slide,
        true
        )   
    
    
    
    
    
    
    }
    
    
    
draw_set_color(c_white)
draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_attached,0,mouse_x-16,mouse_y-16)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
