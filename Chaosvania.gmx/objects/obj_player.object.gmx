<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_debug</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "action";
canset = true
spd = 12000
pushblock = noone
//Key Count
hingekey = 0;
slidekey = 0;

//Moving animation variables
moving = false;
m_strafe = false;
shooting = false;
dir = 0

created = false

instance_create(x,y,obj_camera)
instance_create(x,y,obj_inv)
instance_create(x,y,obj_time)
instance_create(x,y,obj_control)
instance_create(x,y,obj_grid)
instance_create(x,y,obj_lighting)
instance_create(x,y,obj_screen_fader)


instance_create(x,y,obj_head)
instance_create(x,y,obj_arm_left)
instance_create(x,y,obj_arm_right)
instance_create(x,y,obj_legs)


//Create Physics Fixture
fix_player = physics_fixture_create();
physics_fixture_set_density(fix_player, 1);
physics_fixture_set_friction(fix_player, 0.2);
physics_fixture_set_linear_damping(fix_player,10);
physics_fixture_set_angular_damping(fix_player,0.1);
physics_fixture_set_restitution(fix_player,0.1);
physics_fixture_set_sensor(fix_player,false);
physics_fixture_set_awake(fix_player, true);
physics_fixture_set_circle_shape(fix_player, 32);

//Bind Physics Fixture
physics_fixture_bind(fix_player,obj_player);

//NPC
npc = obj_testbox







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shooting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
/*
//Debugging blood
if keyboard_check_pressed(vk_right)
    for (i=0; i&lt;irandom_range(10,20); i+=1)
    {
        blood = instance_create(mouse_x,mouse_y,obj_bloodsplatter)
        with(blood)
            totaldir = 0
    };
if keyboard_check_pressed(vk_up)
    for (i=0; i&lt;irandom_range(10,20); i+=1)
    {
        blood = instance_create(mouse_x,mouse_y,obj_bloodsplatter)
        with(blood)
            totaldir = 90
    };
if keyboard_check_pressed(vk_left)
    for (i=0; i&lt;irandom_range(20,40); i+=1)
    {
        blood = instance_create(mouse_x,mouse_y,obj_bloodsplatter)
        with(blood)
            totaldir = 180
    };
if keyboard_check_pressed(vk_down)
    for (i=0; i&lt;irandom_range(20,40); i+=1)
    {
        blood = instance_create(mouse_x,mouse_y,obj_bloodsplatter)
        with(blood)
            totaldir = 270
    };

if mouse_check_button_pressed(mb_left)
    for (i=0; i&lt;5; i+=1)
    {
        blood = instance_create(mouse_x,mouse_y,obj_bloodsplatter_light)
        with(blood)
            totaldir = point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y)
    };
    
*/

if keyboard_check_pressed(ord('C'))
    {
    ds_map_replace(obj_data.current_data,"hp",ds_map_find_value(obj_data.current_data,"hp")-10)
    show_debug_message(string(ds_map_find_value(obj_data.current_data,"hp")))
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move
if state == "action" || state == "pickup" 
    {
    scr_move(spd);
    scr_facedirection(mouse_x,mouse_y,20)
    }
else if state == "upgrading"
    {
    scr_move(spd);
    scr_facedirection(x,y+1,20)
    }
else if state == "pushing"
    {
    pushblock = instance_nearest(x,y,obj_pushblock)
    scr_move(spd);
    dir = round((point_direction(x,y,instance_nearest(x,y,obj_pushblock).x,instance_nearest(x,y,obj_pushblock).y))/90)*90+45
    scr_facedirection2(dir,20)
    }
    
    
//Check what kind of movement the player is making
if obj_player.phy_speed &gt; 0.1
    {
    moving = true
    if abs(scr_angle_difference(dir,direction)) &gt; 45 &amp;&amp; abs(scr_angle_difference(dir,direction)) &lt;135
        m_strafe = true
    else 
        m_strafe = false
    }
else 
    moving = false
    
if mouse_check_button(mb_left)||mouse_check_button(mb_right)
    {
    shooting = true;
    }
else
    {
    if !alarm[9] &amp;&amp; shooting == true
        alarm[9] = 30
         
    }
    

    
//Check if inside upgradepod
if instance_exists(obj_upgradepod)
    {
    pod = instance_nearest(x,y,obj_upgradepod)
    if distance_to_object(pod)=0
        {
        state = "upgrading"
        with(pod)
            activated = true
        }
    else if distance_to_object(pod)&gt;8
        {
        with(pod)
            activated = false
        if state == "upgrading"
            state = "action"
            
        }
    }
    
//Lighting
scr_drawlighting_circle(x,y,4,1)

//Choose which object to interact with

if instance_exists(par_interactable)
    {
    with(par_interactable){closest = false}
    chosen = instance_nearest(x,y,par_interactable)
    with(chosen)
        {
        closest = true
        }
    }



//Interact with npc

if instance_exists(par_npc)
    {
    npc = instance_nearest(x,y, par_npc)
    with(par_npc){inProximity = false}
    with(npc)
        {
        if distance_to_object(other)&lt;240 
            {
            inProximity = true
            if keyboard_check_pressed(ord('E')) &amp;&amp; closest == true
                {
                engaged = true
                obj_player.state = "talking"
                } 
            }
        else
            inProximity = false;  
        }
    if obj_player.state == "talking"
        {
        scr_facedirection(npc.x,npc.y,10)
        }
    }
    
//fail safe for pushblock
if distance_to_object(instance_nearest(x,y,obj_pushblock))&gt;8
    {
    if state == "pushing"
     state = "action"
    }










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>created = true

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if created == true
    {
    physics_fixture_bind(fix_player,obj_player);
    //phy_position_x = obj_spawnpoint.x
    //phy_position_y = obj_spawnpoint.y
    }

phy_position_x = obj_spawnpoint.x
phy_position_y = obj_spawnpoint.y
    
    

    



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(x,y,instance_exists(obj_basicenemy.target1));
if keyboard_check_pressed(ord('G'))
    {
    with(obj_decalsurface)
        {
        for (xx=playerx-lim; xx&lt;playerx+lim; xx += 1)
            {
            for (yy=playery-lim; yy&lt;playery+lim; yy += 1)
                {
                if xx&gt;=0 &amp;&amp; yy&gt;=0
                    {
                    if surface_exists(surface[xx,yy])
                        {
                        surface_set_target(surface[xx,yy])
                        draw_set_color(c_red)
                        draw_circle(obj_player.x-surface_width*xx,obj_player.y-surface_height*yy,20,false)
                        surface_reset_target()
                        }
                    }
                }
            }
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
